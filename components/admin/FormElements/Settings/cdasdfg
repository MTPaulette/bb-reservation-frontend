"use client";

import React from "react";
import { useSession } from "next-auth/react";
import { useTranslations } from 'next-intl';
import Image from "next/image";
import { PencilSquareIcon, UploadIcon, EnvelopIcon, TelephoneIcon, UserIcon } from "@/components/Icons";
import Title from "@/components/Title";
import { CommonSkeleton } from "@/components/Skeletons";
import { Avatar, Button, Input } from "@nextui-org/react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z, ZodType } from "zod";
import { useState } from "react";
import Alert from "@/components/Alert";
import { UserFormType } from "@/lib/definitions";
import { updateClient } from "@/lib/action/clients";


export default function Profile () {
  const { data: session } = useSession();
  const user = session?.user;
  const t = useTranslations("Input");
  const t_settings = useTranslations("Settings");
  const t_error = useTranslations("InputError");

  const schema: ZodType<UserFormType> = z
    .object({
      lastname: z.string().min(1, { message: t_error("lastname") }).max(250),
      firstname: z.string().min(1, { message: t_error("firstname") }).max(250),
      phonenumber: z.string().max(250),
  });

  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");
  const [success, setSuccess] = useState<string>("");

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<UserFormType>({
    resolver: zodResolver(schema),
  })

  const handleFormSubmit = async (data: UserFormType) => {
    setError("");
    setSuccess("");
    setLoading(true);
    updateClient(data, user.id)
    .then(async (res) => {
      setLoading(false);
      if(res?.ok) {
        setTimeout(() => {
          setSuccess(t("update_account_success_msg"));
          window.location.reload();
        }, 500);
      } else {
        const status = res.status;
        switch (status) {
          case 404:
            setError(t_error("user_not_found"));
            break;
          case 422:
            const err = await res.json();
            setError(JSON.stringify(err.errors));
            break;
          case 403:
            setError(t_error("acces_denied"));
            break;
          case 500:
            setError(t_error("something_wrong"));
            break;
          default:
            break;
        }
      }
    })
    .catch((error) => {
      setError(t_error("something_wrong"));
      console.error(error);
    })
  }

  return (
    <>
    {!user ? (
      <CommonSkeleton />
    ) : (
    <div className="grid grid-cols-5 gap-8">
      <div className="col-span-5 xl:col-span-3">
        <div className="rounded-sm border border-divider bg-background shadow-default">
          <div className="border-b border-divider px-7 py-4">
            <Title className="font-medium text-foreground">{t_settings("personal_informations")}</Title>
          </div>
          <div className="px-7 py-4">
            {error != "" ? (
              <Alert color="danger" message={error} />
            ) : null}
            {success != "" ? (
              <Alert color="success" message={success} />
            ) : null}
            <form
              action="#" className="space-y-10 my-4"
              onSubmit={handleSubmit(handleFormSubmit)}
            >
              <div className="flex gap-4">
                <Input
                  autoFocus
                  endContent={
                    <UserIcon fill="currentColor" size={18} />
                  }
                  label={t("lastname")}
                  labelPlacement="outside"
                  type="text"
                  placeholder={t("lastname_placeholder")}
                  variant="bordered"
                  defaultValue={user.lastname? user.lastname: ""}
                  {...register("lastname")}
                  isInvalid={errors.lastname ? true: false}
                  errorMessage={errors.lastname ? errors.lastname?.message: null}
                />
                <Input
                  endContent={
                    <UserIcon fill="currentColor" size={18} />
                  }
                  label={t("firstname")}
                  labelPlacement="outside"
                  type="text"
                  placeholder={t("firstname_placeholder")}
                  variant="bordered"
                  defaultValue={user.firstname? user.firstname: ""}
                  {...register("firstname")}
                  isInvalid={errors.firstname ? true: false}
                  errorMessage={errors.firstname ? errors.firstname?.message: null}
                />
              </div>
              <Input
                isDisabled
                endContent={
                  <EnvelopIcon fill="currentColor" size={18} />
                }
                label={t("email")}
                labelPlacement="outside"
                type="email"
                placeholder={t("email_placeholder")}
                defaultValue={user.email? user.email: ""}
                variant="bordered"
                {...register("email")}
                isInvalid={errors.email ? true: false}
                errorMessage={errors.email ? errors.email?.message: null}
              />
              <Input
                endContent={
                  <TelephoneIcon fill="currentColor" size={18} />
                }
                label={t("phonenumber")}
                labelPlacement="outside"
                type="text"
                variant="bordered"
                placeholder={t("phonenumber_placeholder")}
                defaultValue={user.phonenumber? user.phonenumber: ""}
                {...register("phonenumber")}
                isInvalid={errors.phonenumber ? true: false}
                errorMessage={errors.phonenumber ? errors.phonenumber?.message: null}
              />

              <div className="w-full -mt-12">
                <Button 
                  type="submit"
                  color="primary"
                  isLoading={loading}
                  className="w-full"
                >
                  {t("save")}
                </Button>
              </div>
            </form>
          </div>

          {/* <div className="p-7">
            <form action="#">
              <div className="mb-5.5 flex flex-col gap-5.5 sm:flex-row">
                <div className="w-full sm:w-1/2">
                  <label
                    className="mb-3 block text-sm font-medium text-foreground"
                    htmlFor="fullName"
                  >
                    Full Name
                  </label>
                  <div className="relative">
                    <span className="absolute left-4.5 top-4">
                      <UserIcon fill="currentColor" size={20} />
                    </span>
                    <input
                      className="w-full rounded border border-divider bg-gray py-3 pl-11.5 pr-4.5 text-black focus:border-primary focus-visible:outline-none dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                      type="text"
                      name="fullName"
                      id="fullName"
                      placeholder="Devid Jhon"
                      defaultValue="Devid Jhon"
                    />
                  </div>
                </div>
      
                <div className="w-full sm:w-1/2">
                  <label
                    className="mb-3 block text-sm font-medium text-foreground"
                    htmlFor="phoneNumber"
                  >
                    Phone Number
                  </label>
                  <input
                    className="w-full rounded border border-divider bg-gray px-4.5 py-3 text-black focus:border-primary focus-visible:outline-none dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    type="text"
                    name="phoneNumber"
                    id="phoneNumber"
                    placeholder="+990 3343 7865"
                    defaultValue="+990 3343 7865"
                  />
                </div>
              </div>
      
              <div className="mb-5.5">
                <label
                  className="mb-3 block text-sm font-medium text-foreground"
                  htmlFor="emailAddress"
                >
                  Email Address
                </label>
                <div className="relative">
                  <span className="absolute left-4.5 top-4">
                    <EnvelopIcon fill="currentColor" size={20} />
                  </span>
                  <input
                    className="w-full rounded border border-divider bg-gray py-3 pl-11.5 pr-4.5 text-black focus:border-primary focus-visible:outline-none dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    type="email"
                    name="emailAddress"
                    id="emailAddress"
                    placeholder="devidjond45@gmail.com"
                    defaultValue="devidjond45@gmail.com"
                  />
                </div>
              </div>
      
              <div className="mb-5.5">
                <label
                  className="mb-3 block text-sm font-medium text-foreground"
                  htmlFor="Username"
                >
                  Username
                </label>
                <input
                  className="w-full rounded border border-divider bg-gray px-4.5 py-3 text-black focus:border-primary focus-visible:outline-none dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                  type="text"
                  name="Username"
                  id="Username"
                  placeholder="devidjhon24"
                  defaultValue="devidjhon24"
                />
              </div>
      
              <div className="mb-5.5">
                <label
                  className="mb-3 block text-sm font-medium text-foreground"
                  htmlFor="Username"
                >
                  BIO
                </label>
                <div className="relative">
                  <span className="absolute left-4.5 top-4">
                    <PencilSquareIcon fill="currentColor" size={20} />
                  </span>
      
                  <textarea
                    className="w-full rounded border border-divider bg-gray py-3 pl-11.5 pr-4.5 text-black focus:border-primary focus-visible:outline-none dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    name="bio"
                    id="bio"
                    rows={6}
                    placeholder="Write your bio here"
                    defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque posuere fermentum urna, eu condimentum mauris tempus ut. Donec fermentum blandit aliquet."
                  ></textarea>
                </div>
              </div>
      
              <div className="flex justify-end gap-4.5">
                <button
                  className="flex justify-center rounded border border-divider px-6 py-2 font-medium text-black hover:shadow-1 dark:text-white"
                  type="submit"
                >
                  Cancel
                </button>
                <button
                  className="flex justify-center rounded bg-primary px-6 py-2 font-medium text-gray hover:bg-opacity-90"
                  type="submit"
                >
                  Save
                </button>
              </div>
            </form>
          </div> */}
        </div>
      </div>
      <div className="col-span-5 xl:col-span-2">
        <div className="rounded-sm border border-divider bg-background shadow-default">
          <div className="border-b border-divider px-7 py-4">
            <Title className="font-medium text-foreground">{t_settings("photo")}</Title>
          </div>
          <div className="p-7">
            <form action="#">
              <div className="mb-4 flex items-center gap-3">
                <div className="h-14 w-14 rounded-full">
                  <Avatar
                    as="button"
                    className="transition-transform"
                    color="default"
                    // name={user? user.lastname : ""}
                    size="lg"
                    src="/images/brain-orange-400.png"
                  />
                </div>
                <div>
                  <span className="mb-1.5 text-foreground capitalize">
                    {t_settings("edit_photo")}
                  </span>
                  <span className="flex text-sm capitalize gap-2.5">
                    <button className="hover:text-danger hover:font-medium">
                      {t_settings("delete")}
                    </button>
                    <button className="hover:text-success hover:font-medium">
                      {t_settings("update")}
                    </button>
                  </span>
                </div>
              </div>
      
              <div
                id="FileUpload"
                className="relative mb-5.5 block w-full cursor-pointer appearance-none rounded border border-dashed border-primary bg-transparent dark:bg-content2 px-4 py-4 sm:py-7.5"
              >
                <input
                  type="file"
                  accept="image/*"
                  className="absolute inset-0 z-50 m-0 h-full w-full cursor-pointer p-0 opacity-0 outline-none"
                />
                <div className="flex flex-col items-center justify-center space-y-3">
                  <span className="flex h-10 w-10 items-center justify-center rounded-full border border-divider bg-white dark:bg-boxdark">
                    <UploadIcon fill="#3C50E0" size={16} />
                  </span>
                  <p>
                    <span className="text-primary">Click to upload</span> or
                    drag and drop
                  </p>
                  <p className="mt-1.5">SVG, PNG, JPG or GIF</p>
                  <p>(max, 800 X 800px)</p>
                </div>
              </div>

              <div className="w-full">
                <Button 
                  type="submit"
                  color="primary"
                  isLoading={loading}
                  className="w-full"
                >
                  {t("save")}
                </Button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    )}
    </>
  );
};

