
=======================================================================
Pour modifier les options logo_white et logo_dark, vous pouvez ajouter des
 inputs de type "file" pour permettre à l'utilisateur de télécharger de 
 nouvelles images de logo.

Voici un exemple de code qui montre comment modifier les options logo_white
 et logo_dark :

// Next.js 14 avec TypeScript
import { useState, useEffect } from 'react';

interface Option {
  id: number;
  name: string;
  value: string;
}

const [options, setOptions] = useState<Option[]>([]);
const [logoWhite, setLogoWhite] = useState<File | null>(null);
const [logoDark, setLogoDark] = useState<File | null>(null);

const fetchOptions = async () => {
  const response = await fetch('/api/options');
  const data = await response.json();
  setOptions(data);
};

const handleUpdateOption = async (option: Option) => {
  const response = await fetch(`/api/options/${(link unavailable)}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(option),
  });
  const data = await response.json();
  setOptions(options.map((opt) => (link unavailable) === (link unavailable) ? data : opt));
};

const handleUpdateLogo = async (logo: File, optionName: string) => {
  const formData = new FormData();
  formData.append('logo', logo);
  const response = await fetch(`/api/options/${optionName}`, {
    method: 'PUT',
    body: formData,
  });
  const data = await response.json();
  setOptions(options.map((opt) => opt.name === optionName ? data : opt));
};

useEffect(() => {
  fetchOptions();
}, []);

return (
  <div>
    <h1>Options</h1>
    <form>
      {/* ... */}
      <div>
        <label>Logo White</label>
        <input
          type="file"
          onChange={(event) => {
            setLogoWhite(event.target.files[0]);
            handleUpdateLogo(event.target.files[0], 'logo_white');
          }}
        />
        {logoWhite && <img src={URL.createObjectURL(logoWhite)} alt="Logo White" />}
      </div>
      <div>
        <label>Logo Dark</label>
        <input
          type="file"
          onChange={(event) => {
            setLogoDark(event.target.files[0]);
            handleUpdateLogo(event.target.files[0], 'logo_dark');
          }}
        />
        {logoDark && <img src={URL.createObjectURL(logoDark)} alt="Logo Dark" />}
      </div>
    </form>
  </div>
);



// Laravel API
use Illuminate\Http\Request;
use App\Models\Option;

Route::get('/api/options', function (Request $request) {
    $options = Option::all();
    return response()->json($options);
});

Route::put('/api/options/{name}', function (Request $request, $name) {
    $option = Option::where('name', $name)->first();
    if ($request->hasFile('logo')) {
        $logo = $request->file('logo');
        $option->value = $logo->store('logos', 'public');
    }
    $option->save();
    return response()->json($option);
});

Dans cet exemple, nous utilisons la fonction handleUpdateLogo pour mettre à
 jour les logos lorsque l'utilisateur télécharge de nouvelles images. Nous 
 utilisons également la fonction URL.createObjectURL pour afficher les images
  téléchargées.


====================================================
Voici un exemple de comment faire la redirection vers la 403 page lorsque l'utilisateur veut accéder à une page sans permission dans Next.js 14 avec TypeScript :

import { useNavigate } from 'next/navigation';
import { useEffect } from 'react';

const Page = () => {
  const navigate = useNavigate();
  const permissions = ['read', 'write', 'delete'];
  const requiredPermissions = ['read', 'write'];

  useEffect(() => {
    if (!requiredPermissions.every(permission => permissions.includes(permission))) {
      navigate('/403', { replace: true });
    }
  }, [permissions, requiredPermissions, navigate]);

  return (
    <div>
      <!-- Contenu de la page -->
    </div>
  );
};

Dans cet exemple, nous utilisons le hook useNavigate pour obtenir une instance de la fonction navigate, qui nous permet de rediriger l'utilisateur vers une autre page.

Nous utilisons également le hook useEffect pour vérifier si l'utilisateur a les permissions nécessaires pour accéder à la page. Si ce n'est pas le cas, nous utilisons la fonction navigate pour rediriger l'utilisateur vers la page 403.

Notez que nous utilisons l'option { replace: true } pour remplacer l'historique de navigation de l'utilisateur, de sorte que l'utilisateur ne puisse pas revenir à la page précédente en utilisant le bouton "Retour" du navigateur.

Vous pouvez également utiliser la fonction getServerSideProps pour vérifier les permissions avant de rendre la page.

import { GetServerSideProps } from 'next';

const Page = () => {
  // Contenu de la page
};

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const permissions = ['read', 'write', 'delete'];
  const requiredPermissions = ['read', 'write'];

  if (!requiredPermissions.every(permission => permissions.includes(permission))) {
    return {
      redirect: {
        destination: '/403',
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};

Dans cet exemple, nous utilisons la fonction getServerSideProps pour vérifier les permissions avant de rendre la page. Si l'utilisateur n'a pas les permissions nécessaires, nous redirigeons l'utilisateur vers la page 403.