
import { useSession } from 'next-auth/react';

const Profil = () => {
  const { data: session, status } = useSession();

  // ...

  const handleSubmit = async (e) => {
    // ...
    await updateProfil(data);

    // Mettre à jour les informations de session
    session.user = {
      ...session.user,
      name: nom, // Mettre à jour le nom
      email: email, // Mettre à jour l'email
    };

    // Si le mot de passe a été modifié, il est nécessaire de mettre à jour le token d'accès
    if (password !== session.user.password) {
      // Appeler l'API pour obtenir un nouveau token d'accès
      const response = await axios.post('/api/token', {
        email: email,
        password: password,
      });

      // Mettre à jour le token d'accès dans la session
      session.accessToken = response.data.accessToken;
    }
  };
};


Voici une étape par étape pour envoyer les images en base de données et les afficher à la demande avec Next.js 14 et Laravel API.

Étape 1 : Configurer Laravel pour accepter les fichiers

Dans votre fichier config/filesystems.php, assurez-vous que vous avez configuré le disque de stockage pour accepter les fichiers.


'disks' => [
    // ...
    'public' => [
        'driver' => 'local',
        'root' => storage_path('app/public'),
        'visibility' => 'public',
    ],
],


Étape 2 : Créer un formulaire pour uploader les images

Dans votre composant Next.js, créez un formulaire pour uploader les images.


jsx
import axios from 'axios';

const Profile = () => {
  const [image, setImage] = useState(null);

  const handleUpload = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('image', image);

    try {
      const response = await axios.post('/api/upload-image', formData);
      console.log(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleUpload}>
      <input type="file" onChange={(e) => setImage(e.target.files[0])} />
      <button type="submit">Uploader</button>
    </form>
  );
};


Étape 3 : Créer une API pour uploader les images

Dans votre contrôleur Laravel, créez une méthode pour uploader les images.


namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Storage;

class ProfileController extends Controller
{
    public function uploadImage(Request $request)
    {
        $request->validate([
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);

        $imageName = time().'.'.$request->image->extension();
        $request->image->move(public_path('images'), $imageName);

        return response()->json(['message' => 'Image uploaded successfully']);
    }
}


Étape 4 : Afficher les images

Pour afficher les images, vous pouvez utiliser la même API pour récupérer les images.


jsx
import axios from 'axios';

const Profile = () => {
  const [image, setImage] = useState(null);

  useEffect(() => {
    axios.get('/api/get-image')
      .then((response) => {
        setImage(response.data);
      })
      .catch((error) => {
        console.error(error);
      });
  }, []);

  return (
    <div>
      {image && (
        <img src={`/images/${image}`} alt="Profile Image" />
      )}
    </div>
  );
};


Étape 5 : Créer une API pour récupérer les images

Dans votre contrôleur Laravel, créez une méthode pour récupérer les images.


namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Storage;

class ProfileController extends Controller
{
    public function getImage()
    {
        $imageName = 'image.jpg'; // Remplacez par le nom de l'image que vous avez enregistré
        $filePath = public_path('images/'.$imageName);

        if (file_exists($filePath)) {
            return response()->json($imageName);
        } else {
            return response()->json('Image not found');
        }
    }
}